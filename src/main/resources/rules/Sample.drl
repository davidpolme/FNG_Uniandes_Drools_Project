package com.sample
 
rule "Action is of type LOAD_ANEXO_5_FILE and user does not have permissions"
    when
    	$c: Action(actionType == Role.Action.LOAD_ANEXO_5_FILE)
        $u: User(!roleIds.contains(Role.USER_ROLE_ID))
    then
    	System.out.println("User does not have permissions to upload ANEXO 5. Request permissions to your administrator");
end

rule "Upload CSV file to the system if CSV and not empty"
    when
        $c: Action(actionType == Role.Action.LOAD_ANEXO_5_FILE)
        $u: User(roleIds.contains(Role.USER_ROLE_ID))
        eval($c.validateCSVFileType()) // Check if the file is a CSV file
        eval($c.validateFileIsNotEmpty()) // Check if the file is not empty
    then
        System.out.println("Uploading CSV file to the system");
        // Perform the file upload operation
        $c.loadDataToPortal();
end

rule "Action is of type GENERATE_CUPOS_PORTAL and user does not have permissions"
    when
    	$c: Action(actionType == Role.Action.GENERATE_CUPOS_PORTAL)
        $u: User(!roleIds.contains(Role.USER_ROLE_ID))
    then
    	System.out.println("User does not have permissions to create mass cupos. Request permissions to your administrator");
end

rule "Process cupos portal and validate data file exists in the system"
    when
        $c: Action(actionType == Role.Action.GENERATE_CUPOS_PORTAL)
        $u: User(roleIds.contains(Role.USER_ROLE_ID))
        eval($c.fileExistsInPortal()) // Check if the file was loaded to the system
    then
        System.out.println("Start processing openning cupos");
        CreditQuotaOpening[] cuponOpenings = CreditQuotaOpening.createQuotaOpeningsFromData($c.getData(), $c.portal);
        
        for (CreditQuotaOpening opening : cuponOpenings) {
		  System.out.println("Processing: " + opening);
		  insert(opening);
		}
end

rule "Validate Credit Quota Opening"
    when
        $o: CreditQuotaOpening()
        $u: User(roleIds.contains(Role.USER_ROLE_ID))
        eval($o.validateIntermediaryNit())
        eval($o.validateDebtorId())
        eval($o.validateDebtorTypeId())
        eval($o.validateMinicipalityCode())
        eval($o.validateCIIUCode())
        eval($o.validateCreditReference())
        eval($o.validateWarrantyCode())
    then
        System.out.println("Insert new cupon in the System");
        $o.saveCrediQuotaIntoSystem();
end



//-------------------Case: Cancel Reservation----------------------//


rule "Action is of type CANCEL_RESERVE and user does not have permissions"
    when
        $c: Action(actionType == Role.Action.CANCEL_RESERVE)
        $u: User(!roleIds.contains(Role.USER_ROLE_ID))
    then
        System.out.println("User does not have permissions to cancel reserve. Request permissions to your administrator");
end

rule "Cancel Reservation if Exists"
    when
        $c: Action(actionType == Role.Action.CANCEL_RESERVE)
        $u: User(roleIds.contains(Role.USER_ROLE_ID))
        eval($c.reserveExistsInPortal()) // Check if the reserve exists in the system
    then
        System.out.println("Cancelling reservation");

		ReserveManagement.reserveCancellation($c.getIdReservation());
        System.out.println("Reservation with ID " + $c.getIdReservation().id + " cancelled.");
		LogManagement.saveLog("Reservation with ID " + $c.getIdReservation().id + " was cancelled.");
end

rule "Validate Cancelled Reservations"
    when
        $c: Action(actionType == Role.Action.CANCEL_RESERVE)
        eval($c.reserveExistsInPortal())	 	
    then
        System.out.println("Validating cancelled reservations");
        $c.validateCancelledReservations(); 
        System.out.println("Cancelled reservations validated");	
end


